{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport * as Location from 'expo-location';\nexport default function App() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      location = _useState2[0],\n      setLocation = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errorMsg = _useState4[0],\n      setErrorMsg = _useState4[1];\n\n  function updateLocation() {\n    var _await$Location$reque, status;\n\n    return _regeneratorRuntime.async(function updateLocation$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Location.requestForegroundPermissionsAsync());\n\n          case 2:\n            _await$Location$reque = _context.sent;\n            status = _await$Location$reque.status;\n\n            if (!(status !== 'granted')) {\n              _context.next = 7;\n              break;\n            }\n\n            setErrorMsg('Permission to access location was denied');\n            return _context.abrupt(\"return\");\n\n          case 7:\n            Location.watchPositionAsync({\n              accuracy: Location.Accuracy.Low,\n              timeInterval: 500,\n              distanceInterval: 0\n            }, function (locationUpdate) {\n              var text = 'Waiting..';\n\n              if (errorMsg) {\n                text = errorMsg;\n              } else if (locationUpdate) {\n                text = JSON.stringify(locationUpdate);\n              }\n\n              setLocation(text);\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  useEffect(function () {\n    updateLocation();\n  }, []);\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(Button, {\n    title: \"locartion\",\n    onPress: updateLocation\n  }), React.createElement(Text, null, location));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/home/david/Documents/IoT/iot/App.tsx"],"names":["React","useState","useEffect","Location","App","location","setLocation","errorMsg","setErrorMsg","updateLocation","requestForegroundPermissionsAsync","status","watchPositionAsync","accuracy","Accuracy","Low","timeInterval","distanceInterval","locationUpdate","text","JSON","stringify","styles","container","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;;AAEA,OAAO,KAAKC,QAAZ,MAA0B,eAA1B;AAGA,eAAe,SAASC,GAAT,GAAe;AAC5B,kBAAgCH,QAAQ,CAAC,EAAD,CAAxC;AAAA;AAAA,MAAOI,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAAgCL,QAAQ,CAAC,EAAD,CAAxC;AAAA;AAAA,MAAOM,QAAP;AAAA,MAAiBC,WAAjB;;AAEA,WAAeC,cAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACyBN,QAAQ,CAACO,iCAAT,EADzB;;AAAA;AAAA;AACQC,YAAAA,MADR,yBACQA,MADR;;AAAA,kBAEMA,MAAM,KAAK,SAFjB;AAAA;AAAA;AAAA;;AAGIH,YAAAA,WAAW,CAAC,0CAAD,CAAX;AAHJ;;AAAA;AASEL,YAAAA,QAAQ,CAACS,kBAAT,CAA4B;AAAEC,cAAAA,QAAQ,EAAEV,QAAQ,CAACW,QAAT,CAAkBC,GAA9B;AAAmCC,cAAAA,YAAY,EAAE,GAAjD;AAAsDC,cAAAA,gBAAgB,EAAE;AAAxE,aAA5B,EAAwG,UAACC,cAAD,EAAoB;AAE1H,kBAAIC,IAAI,GAAG,WAAX;;AACA,kBAAIZ,QAAJ,EAAc;AACZY,gBAAAA,IAAI,GAAGZ,QAAP;AACD,eAFD,MAEO,IAAIW,cAAJ,EAAoB;AACzBC,gBAAAA,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeH,cAAf,CAAP;AAED;;AACDZ,cAAAA,WAAW,CAACa,IAAD,CAAX;AACD,aAVD;;AATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBAjB,EAAAA,SAAS,CAAC,YAAM;AACdO,IAAAA,cAAc;AACf,GAFQ,EAEN,EAFM,CAAT;AAIA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEa,MAAM,CAACC;AAApB,KACE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,WAAd;AAA0B,IAAA,OAAO,EAAEd;AAAnC,IADF,EAEE,oBAAC,IAAD,QAAOJ,QAAP,CAFF,CADF;AAOD;AAED,IAAMiB,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,SAAS,EAAE;AACTG,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP;AADoB,CAAlB,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Platform, Text, View, StyleSheet, Button } from 'react-native';\nimport * as Location from 'expo-location';\nimport { initClient } from './broker/mqtt';\n\nexport default function App() {\n  const [location, setLocation] = useState(\"\");\n  const [errorMsg, setErrorMsg] = useState(\"\");\n\n  async function updateLocation() {\n    let { status } = await Location.requestForegroundPermissionsAsync();\n    if (status !== 'granted') {\n      setErrorMsg('Permission to access location was denied');\n      return;\n    }\n\n    //let location = await Location.getLastKnownPositionAsync({ maxAge: 20 });\n    //setLocation(location === null ? {} : location);\n    Location.watchPositionAsync({ accuracy: Location.Accuracy.Low, timeInterval: 500, distanceInterval: 0}, (locationUpdate) => {\n      \n      let text = 'Waiting..';\n      if (errorMsg) {\n        text = errorMsg;\n      } else if (locationUpdate) {\n        text = JSON.stringify(locationUpdate);\n        //console.log(text)\n      }\n      setLocation(text);\n    });\n  }\n\n  useEffect(() => {\n    updateLocation();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"locartion\" onPress={updateLocation}></Button>\n      <Text>{location}</Text>\n\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}